#%RAML 0.8
title: MakerAdmin API v1.0
version: 1
baseUri: http://api.makeradmin.dev/

securitySchemes:
  - oauth_2_0:
      description: Most of the API access is secured with OAuth 2.0
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
            description: Used to send a valid OAuth 2 access token.
            type: string
        responses:
          401:
            description: You have no permission to access this content
      settings:
        authorizationUri: http://api.makeradmin.dev/oauth/token
        accessTokenUri: http://api.makeradmin.dev/oauth/token
        authorizationGrants: [ owner ]
        scopes:
          - "user"
          - "user:email"
          - "user:follow"
          - "public_repo"
          - "repo"
          - "repo:status"
          - "delete_repo"
          - "notifications"
          - "gist"

traits:
  - paged:
      queryParameters:
        page:
          description: The number of the page to load
          required: false
          type: integer
        per_page:
          description: The number of entities per page
          required: false
          type: integer
  - sortable:
      description: Sort
      queryParameters:
        sort_by:
          description: Specify the name of the column that should be used for sorting. If no column is specified the default sorting will apply.
          required: false
          type: string
        sort_order:
          description: Specify is the sorting should be ascending or descending.
          required: false
          type: string
          enum: [asc, desc]
  - searchable:
      queryParameters:
        search:
          description: A freetext search on most columns.
          required: false
          type: string
  - relations:
      queryParameters:
        relations:
          description: Filter on relations to other entities.
          required: false
          type: string

/economy:
  securedBy: [ oauth_2_0 ]
  /accountingperiod:
    get:
      is: [ paged, sortable, searchable ]
      description: Get a list of all accounting periods
    post:
      description: Create a new accounting period
    /{accountingperiod}:
      get:
        description: Get an accounting period
      put:
        description: Update an accounting period
      delete:
        description: Delete an accounting period

  /{accountingperiod}:

    /account:
      description: Manage accounting accounts
      get:
        is: [ paged, sortable, searchable ]
        description: This call returns an list of all accounts
      post:
        description: Creates a new account
        queryParameters:
          account_number:
            description: Account number
            type: integer
            required: true
            example: 3890
          title:
            description: Account title
            type: string
            required: true
            example: Medlemsintäkter
          description:
            description: Account description
            type: string
            example: Innehåller endast medlemsavgifter för årsmedlemskap
      /{account_id}:
        description: Returns an invidual account
        get:
          description: Returns an account specified by account_id
        put:
          description: Updates an account specified by account_id
          queryParameters:
            account_number:
              description: Account number
              type: integer
              example: 3890
            title:
              description: Account title
              type: string
              example: Medlemsintäkter
            description:
              description: Account description
              type: string
              example: Innehåller endast medlemsavgifter för årsmedlemskap
        delete:
          description: Deletes an account specified by account_id

    /instruction:
      description: Manage accounting instructions
      get:
        is: [ paged, sortable, searchable ]
        description: Returns a list of all accounting instructions
        queryParameters:
          account_id:
            description: Filter instruction with a transaction to or from the specified account_id
            type: integer
      post:
        body:
          application/json:
            schema: |
              {
                  "$schema": "http://json-schema.org/draft-03/schema",
                  "type": "object",
                  "properties": {
                    "last_read_at": {
                      "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated. Default: Now.",
                      "type": "string"
                    }
                  }
              }
        responses:
          205:
            description: Marked as read.
      /{instruction_id}:
        description: Manage a single accounting instructions
        get:
          description: Returns a single accounting instructions
        put:
          description: Updates a accounting instructions
        delete:
          description: Deletes a accounting instructions

    /transaction:
      description: Manage accounting transactions
      get:
        is: [ paged, sortable, searchable ]
        description: Returns a list of all accounting transactions
        queryParameters:
          account_id:
            description: Filter transactions to or from the specified account_id
            type: integer
      post:
        description: Create
      /{instruction_id}:
        description: Manage a single accounting transactions
        get:
          description: Returns a single accounting transactions
        put:
          description: Updates a accounting transactions
        delete:
          description: Deletes a accounting transactions

    /costcenter:
      description: Manage cost centers
      get:
        is: [ paged, sortable, searchable ]
        description: Returns a list of all cost centers
      post:
        description: Create a new cost center
      /{costcenter_id}:
        description: Manage a single cost center
        get:
          description: Returns a single cost center
        put:
          description: Updates a cost center
        delete:
          description: Deletes a cost center

    /masterledger:
      get:
        description: Receives the full master ledger

    /valuationreport:
      get:
        description: Valuation report

    /resultreport:
      get:
        description: Valuation report

  /file/{external_id}/{filename}:
    get:
      description: Get attached file

  /invoice:
    description: Manage invoices
    get:
      is: [ paged, sortable, searchable ]
      description: Returns a list of all invoices
    post:
      description: Create invoice
    /{invoice_id}:
      description: Manage a single invoice
      get:
        description: Returns an invoice
      put:
        description: Updates an invoice
      delete:
        description: Deletes an invoice
      /export:
        get:
          description: Export *.odt

/mail:
  description: Mail module
  get:
    is: [ paged, sortable, searchable, relations ]
    description: Get collection
  post:
    description: Create model
  /{entity_id}:
    get:
      description: Read model
    put:
      description: Update model
    delete:
      description: Delete model
  /send:
    post:
      description: Add E-mail to send queue

/rfid:
  description: RFID module
  get:
    is: [ paged, sortable, searchable, relations ]
    description: Get collection
    queryParameters:
      filter_active:
        description: Filters on the "active" column
        required: false
        type: string
        enum: [yes, no, auto]
      filter_tagid:
        description: Filters on the "tagid" column
        required: false
        type: string
        enum: [yes, no, auto]
      filter_startdate:
        description: Filters on the "startdate" column
        required: false
        type: date
      filter_enddate:
        description: Filters on the "enddate" column
        required: false
        type: date
  post:
    description: Create model
  /{entity_id}:
    get:
      description: Read model
    put:
      description: Update model
    delete:
      description: Delete model

/sales:
  description: Sales module
  /history:
    description: Sales history
    get:
      is: [ paged, sortable, searchable, relations ]
      description: Get collection
    post:
      description: Create model
    /{entity_id}:
      get:
        description: Read model
      put:
        description: Update model
      delete:
        description: Delete model
  /subscription:
    description: Subscription
    get:
      is: [ paged, sortable, searchable, relations ]
      description: Get collection
    post:
      description: Create model
    /{entity_id}:
      get:
        description: Read model
      put:
        description: Update model
      delete:
        description: Delete model
  /product:
    description: product
    get:
      is: [ paged, sortable, searchable, relations ]
      description: Get collection
    post:
      description: Create model
    /{entity_id}:
      get:
        description: Read model
      put:
        description: Update model
      delete:
        description: Delete model

/import:
  description: Import

/membership:
  description: Membership module
  /authenticate:
    post:
      description: Authenticate a member
  /member:
    description: Manage single member accounts
    get:
      is: [ paged, sortable, searchable ]
      description: Returns a list of all members
    post:
      description: Create a new member
    /{member_id}:
      description: Manage a single member
      get:
        description: Returns a single member
      put:
        description: Updates a member
      delete:
        description: Deletes a member
      /groups:
        get:
          is: [ paged, sortable, searchable ]
          description: Get all groups the member is in
  /group:
    description: Groups
    get:
      is: [ paged, sortable, searchable ]
      description: Get collection
    post:
      description: Create model
    /{group_id}:
      get:
        description: Read model
      put:
        description: Update model
      delete:
        description: Delete model
      /members:
        get:
          is: [ paged, sortable, searchable ]
          description: Return a list of members in this group
  /role:
      description: Roles
      get:
        is: [ paged, sortable, searchable ]
        description: Get collection
      post:
        description: Create model
      /{role_id}:
        get:
          description: Read model
        put:
          description: Update model
        delete:
          description: Delete model
  /permission:
      description: Roles
      get:
        is: [ paged, sortable, searchable ]
        description: Get collection
      post:
        description: Create model
      /{permission_id}:
        get:
          description: Read model
        put:
          description: Update model
        delete:
          description: Delete model

/oauth:
  description: OAuth 2.0 compatible API
  /token:
    get:
      securedBy: [ oauth_2_0 ]
      description: Get a list of active access tokens
      responses:
        200:
          description: A list of access tokens
    post:
      description: Create a new access token (Login)
      queryParameters:
        grant_type:
          description: Select the grant type
          required: true
          type: string
          enum: [password]
        username:
          description: Username
          required: true
          type: string
        password:
          description: Password
          required: true
          type: string
      responses:
        200:
          description: Successfully logged in
        401:
          description: The username and/or password you specified was wrong
        422:
          description: Validation error; username, password or grant_type is missing
        429:
          description: Too many failed attempts
    /{access_token}:
      delete:
        securedBy: [ oauth_2_0 ]
        description: Delete an access token (Logout)
        responses:
          200:
            description: Successfully deleted
          404:
            description: Could not find the specified access_token in database